name: Test PyPI Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., 1.0.0)'
        required: true
        type: string
      publish_to_test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-build:
    name: Test Build and Distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Update version for testing
      run: |
        # Create temporary version for testing
        TEST_VERSION="${{ inputs.version }}-test.$(date +%Y%m%d%H%M%S)"
        echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV
        
        # Update pyproject.toml with test version
        sed -i "s/version = \"[^\"]*\"/version = \"$TEST_VERSION\"/" pyproject.toml
        
        echo "Updated version to: $TEST_VERSION"
        grep "version =" pyproject.toml
        
    - name: Build distribution
      run: |
        python -m build
        ls -la dist/
        
    - name: Check distribution
      run: |
        python -m twine check dist/*
        
        # Detailed package inspection
        echo "=== Package Contents ==="
        python -c "
        import zipfile
        import tarfile
        import os
        
        for file in os.listdir('dist'):
            print(f'\\nüì¶ {file}:')
            if file.endswith('.whl'):
                with zipfile.ZipFile(f'dist/{file}', 'r') as z:
                    files = z.namelist()
                    print(f'  - {len(files)} files total')
                    music21_files = [f for f in files if 'music21_mcp' in f]
                    print(f'  - {len(music21_files)} music21_mcp files')
                    entry_points = [f for f in files if 'entry_points' in f or 'METADATA' in f]
                    for ep in entry_points[:3]:  # Show first few
                        print(f'  - {ep}')
            elif file.endswith('.tar.gz'):
                with tarfile.open(f'dist/{file}', 'r:gz') as t:
                    files = t.getnames()
                    print(f'  - {len(files)} files total')
                    music21_files = [f for f in files if 'music21_mcp' in f]
                    print(f'  - {len(music21_files)} music21_mcp files')
        "
        
    - name: Test installation from wheel
      run: |
        # Create clean test environment
        python -m venv test_wheel_env
        source test_wheel_env/bin/activate
        
        # Install from wheel
        pip install dist/*.whl
        
        # Test basic functionality
        python -c "
        print('üß™ Testing basic imports...')
        import music21_mcp
        print(f'‚úÖ Version: {music21_mcp.__version__}')
        
        from music21_mcp.services import MusicAnalysisService
        service = MusicAnalysisService()
        tools = service.get_available_tools()
        print(f'‚úÖ Found {len(tools)} tools: {list(tools.keys())[:5]}...')
        
        # Test adapters
        from music21_mcp.adapters import create_sync_analyzer
        analyzer = create_sync_analyzer()
        status = analyzer.get_status()
        print(f'‚úÖ Adapter status: {status[\"status\"]}')
        
        print('üéâ Basic functionality test passed!')
        "
        
        # Test CLI entry points
        echo "üß™ Testing CLI entry points..."
        music21-analysis --help > /dev/null && echo "‚úÖ music21-analysis CLI works"
        music21-mcp --help > /dev/null && echo "‚úÖ music21-mcp CLI works"  
        music21-http --help > /dev/null && echo "‚úÖ music21-http CLI works"
        music21-cli --help > /dev/null && echo "‚úÖ music21-cli CLI works"
        
        deactivate
        rm -rf test_wheel_env
        
    - name: Test installation from source
      run: |
        # Create clean test environment
        python -m venv test_source_env
        source test_source_env/bin/activate
        
        # Install from source
        pip install dist/*.tar.gz
        
        # Quick verification
        python -c "
        import music21_mcp
        print(f'‚úÖ Source install version: {music21_mcp.__version__}')
        "
        
        deactivate
        rm -rf test_source_env
        
    - name: Store test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-distribution-${{ env.TEST_VERSION }}
        path: dist/

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: test-build
    if: inputs.publish_to_test_pypi
    environment: 
      name: test-pypi
      url: https://test.pypi.org/project/music21-mcp-server/
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Update version for Test PyPI
      run: |
        # Create unique test version
        TEST_VERSION="${{ inputs.version }}-test.$(date +%Y%m%d%H%M%S)"
        echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_ENV
        
        # Update pyproject.toml
        sed -i "s/version = \"[^\"]*\"/version = \"$TEST_VERSION\"/" pyproject.toml
        
        echo "Test PyPI version: $TEST_VERSION"
        
    - name: Build distribution
      run: |
        python -m build
        
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/* --verbose
        
    - name: Verify Test PyPI publication
      run: |
        echo "üïê Waiting for Test PyPI to process package..."
        sleep 60
        
        # Try to install from Test PyPI
        python -m venv testpypi_env
        source testpypi_env/bin/activate
        
        # Install from Test PyPI with retries
        for i in {1..3}; do
          echo "Attempt $i to install from Test PyPI..."
          if pip install -i https://test.pypi.org/simple/ music21-mcp-server==$TEST_VERSION --extra-index-url https://pypi.org/simple/; then
            echo "‚úÖ Successfully installed from Test PyPI"
            break
          else
            echo "‚ö†Ô∏è Failed attempt $i"
            sleep 30
          fi
        done
        
        # Verify installation
        python -c "
        import music21_mcp
        print(f'üéâ Test PyPI version verified: {music21_mcp.__version__}')
        assert '$TEST_VERSION' in music21_mcp.__version__, f'Version mismatch: {music21_mcp.__version__}'
        "
        
        deactivate
        rm -rf testpypi_env
        
        echo "üéâ Test PyPI release successful!"
        echo "üì¶ Test PyPI URL: https://test.pypi.org/project/music21-mcp-server/$TEST_VERSION/"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: publish-test-pypi
    if: always() && inputs.publish_to_test_pypi
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Test end-to-end workflow
      run: |
        # Create fresh environment
        python -m venv integration_env
        source integration_env/bin/activate
        
        # Calculate test version (same logic as before)
        TEST_VERSION="${{ inputs.version }}-test.$(date +%Y%m%d%H%M%S)"
        
        # Wait for Test PyPI propagation
        echo "üïê Waiting for Test PyPI propagation..."
        sleep 120
        
        # Install from Test PyPI
        pip install -i https://test.pypi.org/simple/ music21-mcp-server --extra-index-url https://pypi.org/simple/
        
        # Run comprehensive test
        python -c "
        print('üß™ Running integration tests...')
        
        # Test imports
        import music21_mcp
        from music21_mcp.services import MusicAnalysisService
        from music21_mcp.adapters import create_sync_analyzer
        
        print(f'‚úÖ Package version: {music21_mcp.__version__}')
        
        # Test service
        service = MusicAnalysisService()
        tools = service.get_available_tools()
        assert len(tools) == 13, f'Expected 13 tools, got {len(tools)}'
        print(f'‚úÖ Service has {len(tools)} tools')
        
        # Test adapter
        analyzer = create_sync_analyzer()
        status = analyzer.get_status()
        assert status['status'] == 'ready', f'Expected ready status, got {status}'
        print(f'‚úÖ Adapter status: {status[\"status\"]}')
        
        print('üéâ Integration test passed!')
        "
        
        deactivate
        rm -rf integration_env
        
    - name: Summary
      if: always()
      run: |
        echo "üìã Test Summary:"
        echo "‚úÖ Build and distribution test completed"
        if [ "${{ inputs.publish_to_test_pypi }}" == "true" ]; then
          echo "‚úÖ Test PyPI publication completed"
          echo "‚úÖ Integration test completed"
          echo "üîó Test PyPI: https://test.pypi.org/project/music21-mcp-server/"
        fi
        echo "üöÄ Ready for production release!"