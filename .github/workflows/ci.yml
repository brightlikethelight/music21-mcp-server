name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "**/pyproject.toml"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev ruff mypy
    
    - name: Run Ruff linter
      run: |
        uv run ruff check src/ tests/ --output-format=github
    
    - name: Run Ruff formatter check
      run: |
        uv run ruff format --check src/ tests/
    
    - name: Run MyPy type checker
      run: |
        uv run mypy src/music21_mcp/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up UV
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fluidsynth musescore3

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add pytest pytest-cov pytest-asyncio

    - name: Configure music21 for CI
      run: |
        uv run python -c "
        import music21
        from music21 import environment
        env = environment.Environment()
        env['directoryScratch'] = '/tmp/music21'
        env['autoDownload'] = 'deny'
        print('Music21 configured for CI')
        "

    - name: Run fast tests with coverage
      run: |
        uv run pytest tests/ -v -m "not slow" \
          --asyncio-mode=auto \
          --cov=src/music21_mcp \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --junitxml=junit/test-results-${{ matrix.python-version }}.xml \
          --cov-fail-under=76
    
    - name: Run slow tests separately
      if: matrix.python-version == '3.11'
      run: |
        uv run pytest tests/ -v -m "slow" \
          --asyncio-mode=auto \
          --cov=src/music21_mcp \
          --cov-append \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=junit/test-results-slow-${{ matrix.python-version }}.xml
      continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev bandit[toml] pip-audit safety

    - name: Run bandit security scan
      run: |
        # Generate JSON report (may exit with 1 if any issues found)
        uv run bandit -r src/ -f json -o bandit-results.json || true
        
        # Only fail CI on HIGH severity issues
        # Skip tests that are not relevant for music analysis:
        # B311: random (used for music generation, not crypto)
        # B110,B112: try/except patterns (acceptable for optional operations)
        # B104: bind all interfaces (needed for HTTP server)
        # B101: assert used (acceptable in non-production code)
        uv run bandit -r src/ -lll -s B311,B110,B112,B104,B101

    - name: Run pip-audit vulnerability scan
      run: |
        uv run pip-audit --desc --format=json --output=pip-audit-results.json
        uv run pip-audit --desc

    # Safety scan temporarily disabled due to compatibility issue
    # Error: post_dump() got an unexpected keyword argument 'pass_many'
    # TODO: Re-enable when safety package is fixed or find alternative
    # - name: Run safety security scan
    #   run: |
    #     uv run safety check --json > safety-results.json
    #     uv run safety check

    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          bandit-results.json
          pip-audit-results.json
          # safety-results.json (disabled due to compatibility issue)

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Test all interfaces
      run: |
        # Test Python API
        uv run python -c "from music21_mcp.services import MusicAnalysisService; s=MusicAnalysisService(); tools=s.get_available_tools(); print(f'Found {len(tools)} tools'); assert len(tools) >= 10"
        
        # Test HTTP API can launch
        timeout 5 uv run python -m music21_mcp.launcher http || true
        
        # Test CLI works
        uv run python -m music21_mcp.adapters.cli_adapter --help
        
        # Test adapters
        uv run python -c "from music21_mcp.adapters import create_sync_analyzer; a=create_sync_analyzer(); status=a.get_status(); print(f'Status: {status}'); assert status['status'] == 'ready'" || echo 'Adapter test failed but continuing'

  build:
    name: Build and Test Distribution
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build distribution
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
        
    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import music21_mcp; print(music21_mcp.__version__)"
        pip uninstall -y music21-mcp-server
    
    - name: Store distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: dist/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev sphinx sphinx-rtd-theme

    - name: Check documentation builds without warnings
      run: |
        # Check if Sphinx docs exist and build them
        if [ -d "docs" ] && [ -f "docs/Makefile" ]; then
          cd docs && uv run make html SPHINXOPTS="-W"
        elif [ -d "docs" ]; then
          echo "Documentation directory exists but no Sphinx Makefile found"
          echo "Validating markdown files instead..."
          find docs -name "*.md" -exec echo "âœ“ Found: {}" \;
        else
          echo "No documentation directory found, skipping docs build"
        fi

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev pytest-benchmark

    - name: Run performance benchmarks
      run: |
        if [ -d "tests/benchmarks" ]; then
          uv run pytest tests/benchmarks/ -v --benchmark-only --benchmark-json=benchmark-results.json
        fi

  release-readiness:
    name: Release Readiness Check
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check CHANGELOG.md exists
      run: |
        if [ ! -f "CHANGELOG.md" ]; then
          echo "ERROR: CHANGELOG.md is required for releases"
          exit 1
        fi

    - name: Check version consistency
      run: |
        # Extract version from pyproject.toml
        VERSION=$(grep -E "^version = " pyproject.toml | cut -d'"' -f2)
        echo "Package version: $VERSION"
        
        # Check if version tag exists
        if git tag -l "v$VERSION" | grep -q .; then
          echo "Version $VERSION already released"
        else
          echo "Version $VERSION is ready for release"
        fi