name: Release to PyPI

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests Before Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fluidsynth musescore3

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add pytest pytest-cov pytest-asyncio

    - name: Configure music21
      run: |
        uv run python -c "
        import music21
        from music21 import environment
        env = environment.Environment()
        env['directoryScratch'] = '/tmp/music21'
        env['autoDownload'] = 'deny'
        "

    - name: Run full test suite
      run: |
        uv run pytest tests/ -v \
          --asyncio-mode=auto \
          --cov=src/music21_mcp \
          --cov-report=xml \
          --cov-fail-under=80

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install semantic-release
      run: |
        python -m pip install --upgrade pip
        pip install python-semantic-release

    - name: Semantic Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        semantic-release publish

  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, release]
    if: github.ref == 'refs/heads/main' && success()
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: Build distribution
      run: |
        python -m build

    - name: Check distribution
      run: |
        twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Verify publication
      run: |
        sleep 30  # Wait for PyPI to update
        pip install music21-mcp-server
        python -c "import music21_mcp; print(f'Successfully installed version {music21_mcp.__version__}')"